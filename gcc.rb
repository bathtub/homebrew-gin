require 'formula'
class      Gcc45 < Formula
 url      'http://ftp.gnu.org/gnu/gcc/gcc-4.5.4/gcc-4.5.4.tar.bz2'
 mirror   'http://ftpmirror.gnu.org/gcc/gcc-4.5.4/gcc-4.5.4.tar.bz2'
 sha1     'cb692e6ddd1ca41f654e2ff24b1b57f09f40e211'
end; class Gcc46 < Formula
 url      'http://ftp.gnu.org/gnu/gcc/gcc-4.6.4/gcc-4.6.4.tar.bz2'
 mirror   'http://ftpmirror.gnu.org/gcc/gcc-4.6.4/gcc-4.6.4.tar.bz2'
 sha1     '63933a8a5cf725626585dbba993c8b0f6db1335d'
end; class Gcc47 < Formula
 url      'http://ftp.gnu.org/gnu/gcc/gcc-4.7.3/gcc-4.7.3.tar.bz2'
 mirror   'http://ftpmirror.gnu.org/gcc/gcc-4.7.3/gcc-4.7.3.tar.bz2'
 sha1     '69e02737bd6e1a7c6047d801600d39c32b9427ca'
end; class Gcc48 < Formula
 url      'http://ftp.gnu.org/gnu/gcc/gcc-4.8.1/gcc-4.8.1.tar.bz2'
 mirror   'http://ftpmirror.gnu.org/gcc/gcc-4.8.1/gcc-4.8.1.tar.bz2'
 sha1     '4e655032cda30e1928fcc3f00962f4238b502169'
end; class Gcc49 < Formula
#url      'http://repo.or.cz/r/official-gcc.git'
#         'NotImplementedError: strategy requires a name parameter' :(
 url      'http://github.com/mirrors/gcc/archive/master.tar.gz'
 version  '4.9' # Workaround, but caches the download...
end; class Gccllvmgcc < Formula
 url      'http://llvm.org/releases/2.9/llvm-gcc-4.2-2.9.source.tgz'
 sha1     '6576576750c9b2afb42838851d51be0b91b12f3e'
end; class Llvm29 < Formula
 url      'http://llvm.org/releases/2.9/llvm-2.9.tgz'
 sha1     '500f587f840199ac53c4fc7572839d08fa9d9123'
end; class Libiconv < Formula # In homebrew/dupes but the formula is broken.
 url      'http://ftp.gnu.org/gnu/libiconv/libiconv-1.14.tar.gz'
 mirror   'http://ftpmirror.gnu.org/libiconv/libiconv-1.14.tar.gz'
 sha1     'be7d67e50d72ff067b2c0291311bc283add36965'
end; class Ppl < Formula # PPL 1.0 needs GMP ABI<=5.0.5. This is stable enough.
 homepage 'http://bugseng.com/products/ppl'
 url      'http://bugseng.com/products/ppl/download/ftp/snapshots/'+
          'ppl-1.1pre9.tar.bz2'
 sha1     '5f284a59752187ddeb6f294cdfa61a0d35d6ae4f'
end; class Gcc < Formula
 homepage 'http://gcc.gnu.org'
 url      "file://#{%x|echo '0'> /tmp/...; ls /tmp/...|.chomp}",:using=>:nounzip
 sha1     '09d2af8dd22201dd8d48e5dcfcaed281ff9422c7'
 head     "file://#{%x|echo '0'> /tmp/...; ls /tmp/...|.chomp}",:using=>:nounzip
 sha1     '09d2af8dd22201dd8d48e5dcfcaed281ff9422c7'
 # Eww, I know. But brew rejects formulae lacking an explicit URI.

 version '4'; vers = '4.8.1'
 u, asub = 'uname', 'sed -es/i386/i686/ -es/arm.*/arm/ -es/ppc.*/powerpc/'
 osv, ver, arch, arch32 = %x(#{u} -r).sub(/\..*/,'').chomp.to_i,
 vers.to_s.sub(/\..$/,''), %x(#{u} -m|#{asub}).chomp, %x(#{u} -p|#{asub}).chomp
 arch = 'x86_64' if osv==9 and %x(sysctl -n hw.cpu64bit_capable).chomp.to_i==1
 double = "-apple-darwin#{osv}"; triple, triple32 = arch+double, arch32+double

 if osv > 12 or osv < 9
  gccstr = "LLVM-GCC and GCC #{ver}" else gccstr = "GCC #{ver}" end

 option "+==>  By default, builds #{gccstr} for #{triple} with",
        "C, C++, Objective C, and Objective C++. Additionally you may:"

 if (osv  > 9 and MacOS.prefer_64_bit?) or
    (osv == 9 and %x(sysctl -n hw.cpu64bit_capable).chomp.to_i == 1)
  option '32-bit', "Build instead for #{triple32}."
  option '32-bit --64-bit',"Build both architectures."
 end

 option '4.5 --4.6 --4.7 --4.8 --llvm-gcc --HEAD',
        "Select one or more of the above version(s)."
 option 'ada',           "Build the 'gnat' Ada compiler."
 option 'fortran',       "Build the 'gfortran' FORTRAN compiler."
 option 'go',            "Build the 'gccgo' Go compiler."

 option 'llvm-gcc',      "Build LLVM-GCC (LLVM 2.9, GCC 4.2.1)."

 option 'show-hidden',   'Show advanced (unsupported) options.'

 if build.include?       'show-hidden'
  option 'bootstrap',    "Build three times iteratively; not recommended."
  option 'nls',          'Native language support (internationalizations).'
  option 'profile',      'Add profiling generation stages to bootstrap.'
  option 'rts-comments', "Don't strip comments from Ada RTS header files."
  option 'size',         'Optimize for size rather than speed.'
  option 'test-suite',   'Recommended for maintainers only. Takes hours.'
  %w(4.5 4.6 4.7 4.8 4.9 64-bit).each{|o| option o} # 'Register' combined opts.
 end

 # option 'flto',          "Use GCC's link-time optimization. Buggy."

 # While it is possible to build GCC with GCC's own LTO, the way it handles
 # the storage of LTO information with Mach-O files seems to be pretty buggy,
 # and causes the binaries to baloon (though they're still functional).
 # Compicating matters further, the LTO information generated by each (major)
 # version of GCC is incompatible with LTO build with other versions.
 # Therefore, (to the best of my knowledge) the only surefire method would
 # be to build the dependecies and each version of GCC once, then rebuild
 # each dependency / each GCC again using the corresponding first-pass build.
 # This is essentially what the bootstrap-lto build config does, but we'd
 # have to build GMP, etc. in tree, which disables all assembler-based,
 # asymptotically fast GMP operations. But you can still pass '--flto'
 # if you feel like trying it, in which case each version will be build with
 # GCC 4.6 format LTO, or (if building multiple versions), the LTO format
 # of the prior version (i.e., 4.8 will be built with 4.7).

 # option 'java',         "Build the 'gcj' Java compiler."

 # Java is intentionally left out of the option list, as GCJ is buggy on OS X
 # to begin with, and additionally it (is the ONLY component that) cannot be
 # built statically/portably. It (at least) doubles both compile time and
 # installed footprint. It hasn't seen any significant development since 2009.
 # If you're looking for a tool to compile Java into native machine code, check
 # out Avian. If you think you still really do need GCJ, you can in fact pass
 # the '--java' option and we'll build it. No promises that it will work though!

 # option 'dragonegg',     "Build the 'dragonegg' LLVM plugin/backend."

 # Not working presently. actually unsure it actually builds on Darwin at all.
 # Loadable modules are not fun on this platform.
 # Progress so far (in case someone else wants to have a whack at it):

 # 1. Build LLVM + Compiler RT. Unpack the dragonegg source, read the docs.
 # 2. Set the appropriate makeflags. The first error you'll hit is missing
 #    memory sanitizer headers. These are in lib/clang/3.X/include of the LLVM
 #    install tree. Include them. Make. It should build.
 # 3. Try to use the plugin or make check. It will bomb out with looking for
 #    sch_istable. This symbol is in libiberty. Add -liberty to the target.
 # 4. Next missing symbol: make_pairs. Not sure what this is from, but
 #    its only used in one little function. Grep through the code and you'll
 #    find it. Comment it out. Try again.
 # 5. Now we're missing 'cfun'. I don't know what this is, and it seems to be
 #    used a lot of places, pretty essential.
 # 6. ...

  %w(dash ld64 libarchive).each{|d| depends_on d => :build} if osv < 10
  depends_on 'base64' => :build if osv < 11
  depends_on 'dejagnu' => :build if build.include? 'test-suite'
  depends_on 'autogen' => :build if build.include? 'test-suite'
 unless osv < 9
  depends_on 'cmake' => :build if build.include? 'llvm-gcc' or osv > 12 else
  depends_on 'm4' if build.include? '4.6' or build.include? '4.7'
 end

 def patches; 'http://raw.github.com/gist/2fb26a04e67321528a01/'+
              'cb20f123a242413b30feaee5790a53a3e48111ac'
 end # When is a patch not a patch? ...documented below.

 unless %x(uname -p).chomp == 'i386'
  opoo 'This formula currently only supports Intel processors. Sorry!' end

 def install; vers = '4.8.1'; unless %x(uname -p).chomp == 'i386'
  onoe 'This formula currently only supports Intel processors. Sorry!'; exit end

 # --- Synopsis ---
 # The general build strategy here is to iterate over each architecture
 # and version successively. The dependencies are built once for each arch.
 # If multiple versions are built, the next version with the preceding one.
 # Each version is installed to share/[name]/Versions/[version]/[architecture],
 # (i.e., /usr/local/Cellar/gcc/4/share/gcc/4.8/x86_64) inspired of course
 # by Homebrew itself and the OS X 'framework' concept. The gcc/g++
 # executables are shell script wrappers ala superenv. The actual frontend
 # binaries are installed as triple-file-version and symlinked into bin.

 # We build the executables and depedencies with agressive optimization
 # and the libriaries (which are built in "stage 2") at -Os; everything
 # is built statically so the end product has no dynamic linkage to break.
 # It is completely portable within the filesystem.

 # --- Variable key: --- (partial, but hopefully the rest can be inferred?)

 # -- [array] --
 # bits  - bitnesses (to be built) -- (word?)
 # ds    - dependencies
 # dsds  - dependency directories
 # vs    - versions (to be built)

 # -- [string] --
 # asub  - architecture substitution (for building target triples)
 # b     - (current working) bitness
 # bd    - bitness directory
 # bp    - buildpath
 # dd    - dependency directory
 # tfv   - triple-file-version
 # fv    - file-version
 # f     - file
 # v     - version (being built)
 # vers  - latest stable version

 # -- [int] --
 # osv   - OS (i.e., Darwin) version

 ## -- Setup --

 ##  Here we setup convenience variables for archictectures, versions,
 ##  dependencies, canonical build triples, etc. We also find the real
 ##  CC/CXX executables being used by superenv, which is necessary for
 ##  building the LLVM-GCC backend; otherwise the regression tests will fail.
 ##  LLVM-GCC doesn't build it's own libstdc++, so we need to find the correct
 ##  headers which will be passed to configure with --with-gxx-include-dir.

   ENV.clang; m, vs, envd, bits, path, bp, osv, asub = 'make ', [],
   %x(which cc).chomp.sub('/cc',''), ['64'], ENV['PATH'], buildpath,
   %x(uname -r).sub(/\..*/,'').chomp.to_i,
   'sed -es/i386/i686/ -es/arm.*/arm/ -es/ppc.*/powerpc/'
   unless ENV['CC'].nil?
     cc, cxx = %x(basename $CC).chomp, %x(basename $CXX).chomp else
     cc, cxx = 'cc', 'c++'
   end

   unless (osv  > 9 and MacOS.prefer_64_bit?) or
          (osv == 9 and %x(sysctl -n hw.cpu64bit_capable).chomp.to_i == 1)
    bits = ['32']; else
    bits = ['32'] if build.include? '32-bit'
    bits << '64'  if bits == ['32'] and build.include? '64-bit' end
    bits = ['32','64'] if ENV['HOMEBREW_CCCFG'] == 'bi6'

   %w(llvm-gcc 4.5 4.6 4.7 4.8 4.9).each{|v| vs << v if build.include? v}
   if vs==[]; vs<<'llvm-gcc' if osv > 12 or osv < 9; vs << vers.sub(/\..$/,'')
   end; vs << '4.9' if build.head?

   noenvpath='/usr/local/bin:/usr/bin:' + path.sub(envd,'')
   %w(MACOSX_DEPLOYMENT_TARGET CFLAGS CXXFLAGS LDFLAGS).each{|c| ENV.delete c}
   newflags, gcc, gxx, realcc, realcxx = '-Os -g0 -w', 'env gcc', 'env g++',
   "#{%x(env PATH=#{noenvpath} which #{cc}).chomp}",
   "#{%x(env PATH=#{noenvpath} which #{cxx}).chomp}"; dd, double, arch,
   arch32, ENV['CC'], ENV['CXX'] = bp/'dependencies', "-apple-darwin#{osv}",
   %x(uname -m|#{asub}).chomp, %x(uname -p|#{asub}).chomp, 'cc', 'c++'
   arch = 'x86_64' if osv==9 and %x(sysctl -n hw.cpu64bit_capable).chomp.to_i==1
   ds = %w(gmp mpfr) unless vs == ['llvm-gcc'] and !build.include? 'fortran'
   ds+= %w(libmpc cloog) unless vs == ['llvm-gcc']; triple, triple32, mc, gmp,
   mpfr, mpc, isl, cloog, libiconv, ppl, llvm29, sdkpath, lltargets, llarchs =
   arch+double, arch32+double, m+'check', dd/'gmp', dd/'mpfr', dd/'mpc',
   dd/'isl', dd/'cloog', dd/'libiconv',dd/'ppl', dd/'llvm29', MacOS.sdk_path,
   %w(CBackend X86 PowerPC ARM).join(';'), bits.join(';').sub('32',
   'i386').sub('64','x86_64'); llvm29build, llvm29src, cm, gxxincd, gxv =
   llvm29/'build', llvm29/'src', %W(cmake ../src -DLLVM_BUILD_TOOLS=0
   -DLLVM_TARGETS_TO_BUILD='#{lltargets}' -DCMAKE_INSTALL_PREFIX=#{llvm29}),
   '/usr/include/c++/', '4.0.0'; gxv = '4.2.1' if osv > 9; gx = gxxincd + gxv

   if sdkpath.nil? and %x(which -s xcode-select)
    toolchain, sdkdir = %x(xcode-select -print-path).chomp,
    "/SDKs/MacOSX10.#{osv-4}.sdk"; sdkpath = toolchain+sdkdir
   end

   if (osv > 10 and !MacOS::CLT.installed?) or osv > 12
    cm += %W(-DCMAKE_OSX_SYSROOT=#{sdkpath})
    sysroot = "--with-sysroot=#{sdkpath}"; else sysroot=''
   end

   if osv < 10
    ENV.prepend 'PATH', bp/'sbin',':'; mkdir_p bp/'sbin'; cd bp/'sbin' do
     ln_s Formula.factory('libarchive').opt_prefix/'bin/bsdtar', 'tar'
     ln_s Formula.factory('dash').opt_prefix/'bin/dash', 'sh'
     ln_s Formula.factory('ld64').opt_prefix/'bin/ld', 'ld' end
   end; inreplace './utilities...', '$E -D', '$E -d' if osv < 11

   if (osv > 10 and !MacOS::CLT.installed?) or osv > 12
    %w(CFLAGS CXXFLAGS CPPFLAGS CXXCPPFLAGS XXCFLAGS).each{|c| ENV.append c,
      "-isysroot #{sdkpath} -I#{sdkpath}/usr/include"}
    ENV.append 'XLDFLAGS', "-syslibroot #{sdkpath}"
   end

   if osv > 12
    %w(CFLAGS CXXFLAGS CPPFLAGS CXXCPPFLAGS XXCFLAGS).each{|c| ENV.append c,
     "-I#{toolchain}/usr/lib/llvm-gcc/4.2.1/include"}
   end

   ENV.append 'XXCFLAGS', %W(-DNDEBUG -DPIC -g0 -w -fomit-frame-pointer -msse3
   -momit-leaf-frame-pointer -march=pentium-m -mtune=native).join(' ')
   ENV.append 'XXCFLAGS', '-march=core2' if bits.include? '64'
   ENV.append 'XGCCFLAGS', %W(-O3 -fivopts -floop-interchange -floop-block
    -floop-strip-mine -fmodulo-sched -fmodulo-sched-allow-regmoves
    -frename-registers -ftree-loop-distribution -ftree-loop-im
    -ftree-loop-ivcanon -fvect-cost-model -fweb -mfpmath=sse,387
    ).join(' ') if osv > 8 and not build.include? 'size'
   ENV.append 'XXCFLAGS','-Os' if build.include? 'size' or osv < 9
   ENV.append 'XGCCFLAGS', '-flto=jobserver' if build.include? 'flto'
   ENV['XLDFLAGS'] = "-S -x -w -search_paths_first"
   ENV['MAKEFLAGS'] = "-j#{%x|sysctl -n hw.availcpu|.chomp.to_i.next.next}"
   %w(CXXCPPFLAGS CXXFLAGS XXCXXFLAGS).each{|c| ENV.append c,
    "-I#{gx} -stdlib=libstdc++"} unless cc != 'clang'
   ENV.delete 'GCCVERSION'; ENV.delete 'ARCHPREFERENCE'
   %x(chmod 777 ./utilities...; ./utilities...; chmod -R 777 ./bin ./share)
   ENV.prepend 'PATH', bp/'bin',':'; ln_s bp/'bin/trim', bp/'bin/Trimming...'

 ## The 'magic patch' consists of:

  # 1. Two (32- and 64-bit) tiny but complete versions of GCC 4.6.4.
  #    This is essentially what enables us to build GNAT and GCC Go.
  #    The 4.6 branch is unique in its ability to build GNAT 4.5 as well as
  #    later versions. GCC Go is dependant on a new(er) version libstdc++ / g++.

  # 2. The invaluable 'striptease'. Check out: github.io/mackyle/striptease
  #    We use 'tease' to REMOVE superfluous dynamic linkage in the executables;
  #    as far as I'm aware, this is the only tool that can safely remove
  #    entries from LINKEDIT segments -- install_name_tool can only change them.

  # 3. trim (Trimming...) is trimtrees.pl (The link is deep in CPAN, just do a
  #    search). It generate a hash table of files within a given directory.
  #    If it finds a hash collision, it is verified, then the duplicate files
  #    are replaced by a single inode. This save A LOT of space when building
  #    multiple versions. It could be faster I suppose, but it's very reliable.
  #    The fourth dot in the ellipsis is a shell '.', as in pwd.

  # 4. A shell script wrapper for ld, used to pass flags directly to ld,
  #    particularly, -w, which keeps it from spawning a bunch of heinous but
  #    harmless warnings due to the sorry state of the unwinders.
  #    -Wl,-w doesn't do the trick.

  # 5. Everything is wrapped up into a .tar.xz file (using the xzutils
  #    branch/call/jump filter), base64-encoded, and concatnated to a
  #    sligtly modified version of xzminidec from the xz-embedded project
  #    by Lasse Collin, which in turn is gziped and encoded. The shell script
  #    was written for this project, err... formula. Public domain.

  #    All of the above has been built against the 10.4u SDK and *should*
  #    be safe for tigerbrew, although presently untested on anything < 10.8.

  if osv < 10
   %x(echo '#!/usr/bin/env sh'>#{bp}/bin/cc)
   %x(echo '#!/usr/bin/env sh'>#{bp}/bin/c++)
   %x(chmod +x #{bp}/bin/cc; chmod +x #{bp}/bin/c++)
   %x(echo '#{gcc} "$@" $XXCFLAGS' >> #{bp}/bin/cc); oldcc = gcc
   %x(echo '#{gxx} "$@" $XXCFLAGS $XXCXXFLAGS' >> #{bp}/bin/c++); oldcxx = gxx
  else
   %x(echo '#!/bin/sh' > #{bp}/bin/cc; echo '#!/bin/sh' > #{bp}/bin/c++)
   %x(echo '#{realcxx} "$@" $XXCFLAGS $XXCXXFLAGS' >> #{bp}/bin/c++)
   %x(echo '#{realcc} "$@" $XXCFLAGS' >> #{bp}/bin/cc); oldcc = realcc
   %x(chmod +x #{bp}/bin/cc; chmod +x #{bp}/bin/c++); oldcxx = realcxx
  end

   ohai 'Gathering dependencies...'

    Libiconv.new.brew do libiconv.install Dir['*'] end
    unless vs == ['llvm-gcc'] and not build.include? 'fortran'; ds.each{|d|
     ddd = dd/d; Formula.factory(d).brew do ddd.install Dir['*'] end}
     ln_s cloog/'isl', isl; mv dd/'libmpc', mpc end; ds = []
    unless vs == ['llvm-gcc'] and !build.include? 'fortran'; ds << 'mpfr' end
    unless vs == ['llvm-gcc']; ds+=%w(mpc isl cloog) end
    if build.include? '4.6' or build.include? '4.7'; Ppl.new.brew do
     ppl.install Dir['*'] end; ds << 'ppl' end; ds << 'libiconv'

   ohai 'Gathering GCC source files...'

   vs.each{|v| vd, vc = bp/v,v.gsub(/\./,'').sub('-',''); vn = eval("Gcc#{vc}")
   vn.new.brew do vd.install Dir['*'] end; cd vd do

    %x(contrib/download_ecj) if build.include? 'java' and v < 'llvm-gcc'

    unneededdirs = %w(libmudflap libgo) # libgo isn't supported on Darwin.
    unneededdirs +=%w(gnattools libada) unless build.include? 'ada'
    unneededdirs +=%w(libgfortran) unless build.include? 'fortran'
    unneededdirs +=%w(libjava) unless build.include? 'java'
    unneededdirs +=%w(intl) unless build.include? 'nls'
    unneededdirs +=%w(libffi zlib boehm-gc libobjc libssp libstdc++-v3
                      libada gnattools) if v == 'llvm-gcc'

 ###  Begin heinous block of inreplace. ###


 ## These are (more or less) essential patches under varying cirumstances.

    inreplace 'gcc/graphite-clast-to-gimple.c', 'LANGUAGE_C',
              'CLOOG_LANGUAGE_C' if v == '4.6'

    inreplace 'gcc/ada/gcc-interface/Makefile.in','@rpath/','' if v < 'llvm-gcc'

    if v == 'llvm-gcc'; %w(config/mh-ppc-darwin config/mh-x86-darwin
     gcc/config/i386/x-darwin).each{|f| inreplace f, '-mdynamic-no-pic', ''}
    else inreplace 'config/mh-darwin','-mdynamic-no-pic','' if v >= '4.6' end


 ## The unwinders rear their ugly heads...

    if osv >= 10
     if v > '4.6' and v < 'llvm-gcc'; %w(libgcc/config/libgcc-libsystem.ver
      libjava/include/posix.h).each{|f| inreplace f,
       '_darwin10_Unwind_FindEnclosingFunction','_Unwind_FindEnclosingFunction'}
      %w(libgcc/config/unwind-dw2-fde-darwin.c libjava/include/posix.h).each{|f|
       inreplace f,'>= 1060','>= 9999'} end
      %w(gcc/libgcc-libsystem.ver libjava/include/posix.h).each{|f| inreplace f,
       '_darwin10_Unwind_FindEnclosingFunction',
       '_Unwind_FindEnclosingFunction'} if v <  '4.7'
     %w(gcc/unwind-dw2-fde-darwin.c libjava/include/posix.h ).each{|f|
        inreplace f,'>= 1060','>= 9999'} if v == '4.6'
    end

    if osv < 9 and v >= '4.6' and v < '4.8'
     inreplace 'gcc/ada/adaint.c',
      '&& defined (_osf_)) || defined (__APPLE__)', '&& defined (_osf_))'
    end; if osv < 9 and v >= '4.8' and v < 'llvm-gcc'
     inreplace 'gcc/ada/adaint.c', '(AIX) || defined (__APPLE__)', '(AIX)'
    end; if osv < 9 and v == 'llvm-gcc'
     inreplace 'gcc/libgcov.c','#if defined(__APPLE__) && !defined(__STATIC__)',
      '#if !defined(__APPLE__) && !defined(__STATIC__)'
    end

 ## The build won't fail without these, but they fix things that otherwise
 ## Would be built incorrectly, etc.

    inreplace 'config/mt-ospace', '-g -Os', newflags
    inreplace 'libjava/Makefile.in','./gcj-dbtool -n $(db_name) || ',''

    %w(libjava/Makefile.am libjava/Makefile.in).each{|f| inreplace f,
     '-shared-libgcc','-static-libgcc'}

    %w(libjava/configure libjava/libltdl/configure libjava/classpath/configure
     libgomp/configure libssp/configure libgfortran/configure libobjc/configure
     ).each{|f| inreplace f, 'enable_static=no', 'enable_static=yes'}

    %w(libjava/configure libjava/libltdl/configure libjava/classpath/configure
     ).each{|f| inreplace f, 'build_old_libs=$enable_static',
     'build_old_libs=yes'} if v < 'llvm-gcc'

    %w(libquadmath/configure).each{|f| inreplace f, 'enable_shared=yes',
     'enable_shared=no'; inreplace f, 'enable_static=no',
     'enable_static=yes'} if v >= '4.6' and v < 'llvm-gcc'

    %w(libitm/configure).each{|f| inreplace f, 'enable_shared=yes',
     'enable_shared=no'; inreplace f, 'enable_static=no',
     'enable_static=yes'} if v >= '4.7' and v < 'llvm-gcc'

    %w(libgomp/configure libssp/configure libgfortran/configure
     libobjc/configure).each{|f| inreplace f,'enable_shared=yes',
     'enable_shared=no'}

    %w(libatomic/configure libsanitizer/configure).each{|f| inreplace f,
     'enable_shared=yes', 'enable_shared=no'; inreplace f,
     'enable_static=no', 'enable_static=yes'} if v >= '4.8' and v < 'llvm-gcc'

 ## These yank out most of the -g and -W flags. I haven't caught all of them
 ## but even still, speeds the build significantly. Not strictly necessary.

    inreplace 'libiberty/Makefile.in', '@ac_libiberty_warn_cflags@', ' '
    %w(@warn@ @c_warn@).each{|w|
     inreplace 'libcpp/Makefile.in', w, ' '} if v < 'llvm-gcc'
    %w(@WARN_PEDANTIC@ @WERROR@).each{|w|
     inreplace 'libdecnumber/Makefile.in', w, ' '
     inreplace 'libcpp/Makefile.in', w, ' '
     inreplace 'fixincludes/Makefile.in', w, ' '}
     inreplace 'libdecnumber/Makefile.in','@WARN_CFLAGS@', ''
     inreplace 'libcpp/Makefile.in',      '@WARN_CFLAGS@', '' if v == 'llvm-gcc'
     inreplace 'fixincludes/Makefile.in', '@WARN_CFLAGS@', ''
     inreplace 'libbacktrace/Makefile.in',
               '@WARN_FLAGS@','' if v > '4.7' and v < 'llvm-gcc'
     %w(-Wall -Werror).each{|w|
        inreplace 'libgomp/configure', w, ''} if v == 'llvm-gcc'
     %w(Makefile.in config/acinclude.m4 libtool.m4 libgfortran/configure
      libada/Makefile.in).each{|f|inreplace f,'-g -O2',newflags}; inreplace \
      'gcc/ada/gcc-interface/Makefile.in','-g -O2',newflags if v < 'llvm-gcc'
     %w(gcc/ada/gcc-interface/Makefile.in libjava/Makefile.am
        libjava/Makefile.in).each{|f|
         inreplace f, " -g\n"," -Os\n"} if v < 'llvm-gcc'
     %w(config/acinclude.m4 gnattools/Makefile.in libada/Makefile.in).each{|f|
       inreplace f, "=-g\n", '= '+newflags+"\n"}
     inreplace 'gcc/Makefile.in', '-O2', newflags
     %w(configure libstdc++-v3/configure).each{|f|
      inreplace f,'shared-libgcc','static-libgcc'}
     inreplace 'gcc/ada/gcc-interface/Makefile.in',
     'shared-libgcc','static-libgcc' if v < 'llvm-gcc'
     %w(@c_strict_warn@ @strict_warn@ @c_loose_warn@ @loose_warn@).each{|w|
      inreplace 'gcc/Makefile.in',w,''} if v < 'llvm-gcc'
     %w(gnattools/Makefile.in
      libada/Makefile.in).each{|f|
       inreplace f, '@warn_cflags@', ' '} if v < '4.7'
     if v < 'llvm-gcc'
       inreplace 'libobjc/Makefile.in',
       '-W -Wall -Wwrite-strings -Wstrict-prototypes',''
       inreplace 'libstdc++-v3/Makefile.in', '@WARN_FLAGS@',''
     end

     inreplace 'gnattools/Makefile.in','-W -Wall','' if v > '4.6'
     %w(gcc/Makefile.in gnattools/Makefile.in libada/Makefile.in).each{|f|
      inreplace f,
       /LOOSE_WARN \=.*/,'LOOSE_WARN = '} if v < '4.7' or v == 'llvm-gcc'
     %w(gcc/ada/gcc-interface/Makefile.in libada/Makefile.in).each{|f|
      inreplace f, '-W -Wall', ' '} if v < 'llvm-gcc'
     inreplace 'Makefile.in'," -g\n", " \n" if v >= '4.6' and v < 'llvm-gcc'
     inreplace 'gcc/Makefile.in'," -g\n", " \n" if v < '4.7'
     inreplace 'gcc/ada/gcc-interface/Makefile.in',' -O ', ' ' if v < 'llvm-gcc'
     inreplace 'gcc/gcse.c', '#include "gt-gcse.h"', '' if v == 'llvm-gcc'
     %w(-pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings
       -Wold-style-definition -Wmissing-format-attribute @cxx_compat_warn@
       ).each{|f| inreplace 'gcc/Makefile.in', f, ' '} if v == 'llvm-gcc'
       inreplace 'gcc/Makefile.in','-g ',' '
     %w(-pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings
       -Wmissing-format-attribute -Wc++-compat -Wold-style-definition).each{|w|
       inreplace 'gcc/configure', w, ''}
     %w(-Wall -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition
       -Wextra -Wwrite-strings).each{|w| inreplace 'libgfortran/configure',w,''}

 ## And these are pretty gratuitous. ;)

     if v == 'llvm-gcc'
      inreplace 'gcc/version.c','llvm.org/bugs/','github.com/mxcl/homebrew/wiki'
      inreplace 'gcc/version.c','(Based on Apple Inc. build 5658)',
                                '(LLVM-GCC 2.9)'
      inreplace 'gcc/version.c','(LLVM build)',
                                '(Homebrew build)'
      inreplace 'gcc/version.c','(LLVM build " LLVM_VERSION_INFO ")',
                                '(Homebrew build)'
      else
       inreplace 'gcc/configure', 'PKGVERSION="(GCC) "',
                                  'PKGVERSION="(Homebrew build)"'
      end
      inreplace 'gcc/configure',
                'gcc_config_arguments="$TOPLEVEL_CONFIGURE_ARGUMENTS"',
                'gcc_config_arguments="love."'

 ### End heinous block of inreplace. ###

    unneededdirs.each{|d| %x(mkdir -p #{d}; chmod -R 777 #{d}; rm -rf #{d})}
   end}

   if vs.include? 'llvm-gcc'
    ohai 'Gathering LLVM source files for LLVM-GCC...'
    Llvm29.new.brew do llvm29src.install Dir['*'] end
    cd llvm29src do
     inreplace 'include/llvm/ADT/IntervalMap.h',
               'this->map->newNode<NodeT>();',
               'this->map->template newNode<NodeT>();'
     inreplace 'include/llvm/ADT/PointerUnion.h',
               'Ty(Val).is<T>();',
               'Ty(Val).template is<T>();'
     inreplace 'include/llvm/ADT/PointerUnion.h',
               'Ty(Val).get<T>();',
               'Ty(Val).template get<T>();' end
   end

   system 'Trimming... .'

   if osv == 9
    ohai 'Configuing Leopard-compatible compiler tools...'
    if bits.include? '64'
     %W(#{bp}/bin/gcc #{bp}/bin/g++).each{|f|inreplace f,'$(uname -m)','x86_64'}
    end
    striptease = dd/'striptease'; buildrelease = striptease/'build/Release'
    cd dd do %x(git clone http://github.com/mackyle/striptease.git) end
    cd striptease do system m+'tools'; %w(strip nm install_name_tool).each{|f|
    mv buildrelease/f, bp/'sbin'} end
   end


   if osv < 9 and vs.include? 'llvm-gcc'
    ohai 'Bootstrapping CMAKE for LLVM-GCC...'
    cmake = dd/'cmake'
    Formula.factory('cmake').brew do cmake.install Dir['*'] end; cd cmake do
     %x(./bootstrap --prefix=#{bp}); system m; %x(make -j1 install) end
   end

   if vs.include? 'llvm-gcc'

    ohai "Configuring LLVM backend for LLVM-GCC..."

    if osv == 9 and bits.include? '64' and bits.include? '32'
     ENV['CC'], ENV['CXX'] = 'gcc-4.2', 'g++-4.2' end
    unless bits.include? '32'
     ENV.append 'XXCFLAGS','-m64' if osv == 9 and bits.include? '64' end

    mkdir_p llvm29build; mkdir_p llvm29/'bin'

    cd llvm29build do
     cmm = cm.join(' '); %x(#{cmm})
     if bits.include? '64' and bits.include? '32'
      cm +=%W(-DCMAKE_OSX_ARCHITECTURES='#{llarchs}');
      cmm = cm.join(' '); %x(#{cmm})
     end

     if osv > 8 and not build.include? 'size'
      %w(CFLAGS CXXFLAGS).each{|c|ENV.append c,'-O3'}; %x(#{cmm})
      if cc == 'clang'
       %w(CFLAGS CXXFLAGS).each{|c|ENV.append c,'-O4'}; %x(#{cmm})
      end
      system mc; mv 'bin/llc', llvm29/'bin'; %x(make -j1 install);
     else
      %x(#{cmm}); system 'make llc'; mv 'bin/llc',llvm29/'bin'; %x(make install)
     end
    end

    # Here's a fun little bug: With the way homebrew generates its temporary
    # build directories, if the random string begins with the letter o,
    # the parser will read this as '-o', and the check will fail, as in:

    ## FAIL: LLVM :: LLVMC/OptionPreprocessor.td (3782 of 5841)
    ## Script:
    ## --
    ## /tmp/gcc-oioV/dependencies/llvm29/build/bin/./tblgen ...
    ## --
    ## Exit Code: 127
    ## Command Output (stderr):
    ## ... line 6: /tmp/gccioV ... : No such file or directory

    # So I guess, at the moment, one in sixty-two builds will fail here. :'(

    ENV['CC'], ENV['CXX'] = 'cc','c++'

    cd llvm29 do Dir['*.dylib'].each{|f|rm_rf f} end
    rm_rf llvm29build; rm_rf llvm29src
   end

   bits.each{|b| ENV.m32 if b=='32'; mbit, bd, ENV['ABI'] = '-m'+b, bp/b, b; dc=
    %W(./configure -q --disable-option-checking --disable-debug
     --disable-debugging --disable-documentation --disable-ppl_lcdd
     --disable-ppl_lpsol --disable-ppl_pips --disable-nls --disable-shared
     --enable-fpmath=sse2+387 --enable-gmp-internals --enable-static
     --enable-cxx --prefix=#{bd} --with-pic --with-gmp-include=#{bd}/include
     --with-gmp-lib=#{bd}/lib --with-mpfr-include=#{bd}/include
     --with-mpfr-lib=#{bd}/lib --with-gmp-prefix=#{bd} --with-isl-prefix=#{bd}
     --without-java).join(' '); bitstring = "#{b}-bit "

    dm = "make -j1 install; make distclean; rm -rf #{bd}/lib/*.la"; if b=='32'
    barch, btriple = 'i386', triple32; else barch, btriple = arch, triple end
    ENV.append 'XXCFLAGS', "-m64 #{mbit} -g0 -w -std=gnu89" if osv > 8
    ENV.append 'XXCFLAGS', "-Os" if osv < 9; ENV['ARCHPREFERENCE'] = barch
    ENV.append 'XLDFLAGS', "-L#{bd}/lib"; ENV.prepend 'PATH', bp/'bin',':'
    ENV.append 'XXCFLAGS','-march=core2' if bits.include? '64'
    ENV.delete 'XXCXXFLAGS'

    %w(LD CPP CXXCPP OBJC OBJCPP OBJCXX OBJCXXCPP LDFLAGS CPPFLAGS CXXCPPFLAGS
    OBJCFLAGS OBJCPPFLAGS OBJCXXFLAGS OBJCXXCPPFLAGS CFLAGS CXXFLAGS GCCVERSION
    ).each{|v| ENV.delete v}; %w(CFLAGS CXXFLAGS).each{|c| ENV[c] = ''}

    inreplace bp/'bin/cc', oldcc, gcc; oldcc = gcc
    inreplace bp/'bin/c++', oldcxx, gxx; oldcxx = gxx

    if vs != ['llvm-gcc'] or (vs = ['llvm-gcc'] and build.include? 'fortran')

     ohai "Configuring #{bitstring}"+"static GMP..."
     cppflags = ENV['CPPFLAGS']
     ENV.append 'CPPFLAGS', '-fexceptions'
     cd gmp do dcgmp = dc
      if ENV['HOMEBREW_CCCFG'] == 'bi' || 'bi6' or osv > 12
       dcgmp = dc+' --build=core2'+double if b == '64'
       dcgmp = dc+' --build=pentiumm'+double if b == '32'
      end; %x(#{dcgmp} #{sysroot}); system m; %x(#{dm})
     end; ENV['CPPFLAGS'] = cppflags
    end

    ds.each{|d| cd eval(d) do
     ohai "Configuring #{bitstring}"+"static #{d.upcase}..."
     if d == mpc; %x(#{dc} --build=#{btriple}) else
      %x(#{dc} --build=#{btriple} #{sysroot})
     end; system m; system mc if d == 'mpc' or d == 'cloog'; %x(#{dm})
    end}

   vs.each{|v| vd, bdv = bp/v, bd/v; mkdir_p bdv; cd bdv do
    Dir[vd/'*'].each{|f| ln_s f, bdv}; builddir = bdv/'build'
    %x(mkdir #{builddir}); cd builddir do

 # Per-version variables.
     fullv = %x(cat #{bdv}/gcc/BASE-VER).chomp
     realprefix = share/"#{name.downcase}/Versions/#{v}/#{barch}"
     realbin, reallib, realshare, reallibexec = realprefix/'bin',
     realprefix/'lib', realprefix/'share', realprefix/'libexec'
     realman = realshare/'man'; realman1 = realman/'man1'
     realsublib = reallib/"gcc/#{btriple}/#{fullv}"
     realsublibexec = reallibexec/"gcc/#{btriple}/#{fullv}"
     realsubmlib = realsublib/'i386' if b == '64'
     realsubmlib = realsublib/'x86_64' if b == '32'
     adalib, adainclude = realsublib/'adalib', realsublib/'adainclude'
     adamlib, adaminclude = realsubmlib/'adalib', realsubmlib/'adainclude'
     relrealsublib = "../../../../lib/gcc/#{btriple}/#{fullv}"
     realprefix32 = share/"#{name.downcase}/Versions/#{v}/i386"
     reallib32 = realprefix32/'lib'
     realsublib32 = reallib32/"gcc/#{triple32}/#{fullv}"
     realsubmlib32 = realsublib32/'x86_64'
     adalib32, adamlib32 = realsublib32/'adalib', realsubmlib32/'adalib'

     languages = ['c']; unless build.include? 'only-c'
     languages << 'c++' << 'objc' << 'obj-c++' end
     languages << 'fortran' if  build.include? 'fortran'
     unless v == 'llvm-gcc'
      languages << 'java'    if build.include? 'java'
      languages << 'ada'     if build.include? 'ada'
      languages << 'go'      if build.include? 'go' and v >= '4.6'
     end

     if ENV['HOMEBREW_CCCFG'] == 'bi' or ENV['HOMEBREW_CCCFG'] == 'bi6'
      if v < 'llvm-gcc' and v > '4.5'; %w(ada fortran go).each{|l|
       languages << l unless languages.include? l} end
     end

     langs = languages.join(', ').sub('c','C').sub('c++','C++').sub('objc',
      'Objective C').sub('obj-c++','Objective C++').sub('fortran',
      'FORTRAN').sub('ada','Ada').sub('go','Go').sub('java','Java')

     if osv == 9
      mkdir_p realprefix/btriple
      sysinclude = realprefix/"#{btriple}/sys-include"
      %x(cp -r /usr/lib/gcc/#{triple32}/4.2.1/include #{sysinclude})
      ENV.append 'XXCFLAGS', "-I#{sysinclude} -isystem #{sysinclude}"
     end

     if v == 'llvm-gcc'
      args = %W(-q --enable-languages=#{languages.join(',')} --build=#{btriple}
                --host=#{btriple} --target=#{btriple} --program-suffix=-4.2
                --program-prefix=#{btriple}-llvm- --enable-target-optspace
                --enable-version-specific-runtime-libs --enable-static
                --with-arch-32=pentium-m --with-sse3  --with-pic
                --with-arch-64=nocona --with-gxx-include-dir=#{gx}
                --prefix=#{realprefix} --with-libiconv-prefix=#{bd}
                --enable-llvm=#{llvm29})
      if languages.include? 'fortran'
       args +=%W(--with-gmp=#{bd}) else
       args +=%w(--without-gmp --without-mpfr)
      end
      args +=%w(--disable-bootstrap) if !build.include? 'bootstrap' || 'profile'
      args +=%w(--disable-nls --disable-intl) unless build.include? 'nls'
      if osv > 12 or (osv > 10 and !MacOS::CLT.installed?)
       args +=%W(--with-build-sysroot=#{sdkpath} #{sysroot})
      end
     else
      args = %W(-q --enable-languages=#{languages.join(',')} --build=#{btriple}
                --enable-version-specific-runtime-libs --enable-plugin
                --enable-static --enable-target-optspace --prefix=#{realprefix}
                --program-prefix=#{btriple}- --program-suffix=-#{v}
                --with-libiconv-prefix=#{bd} --with-gmp=#{bd})
      args +=%w(--with-arch-32=pentium-m --with-sse3 --with-mfpmath=sse,387
                --with-tune=native --with-pic --enable-__cxa_atexit) if osv > 8
      args +=%W(--with-ppl=#{bd}) if v > '4.5' and v < '4.8'
      args +=%W(--with-isl=#{bd} --with-cloog=#{bd}
                --enable-cloog-backend=isl --disable-cloog-version-check
                --disable-isl-version-check) if v > '4.5'
      args +=%w(--disable-ppl-version-check) if v > '4.5' and v < '4.8'
      args +=%w(--enable-lto) if v >= '4.6'
      args +=%w(--disable-libgcj) unless build.include? 'libgcj'
      args +=%w(--with-arch-64=core2) if b == '64'
      args +=%w(--disable-libgo) if v > '4.6' and build.include? 'go'
      args +=%w(--disable-multilib) unless bits.include? '64'
      if osv > 12 or (osv > 10 and !MacOS::CLT.installed?)
       args +=%W(--with-build-sysroot=#{sdkpath} #{sysroot})
      end
      args +=%w(--disable-bootstrap) if !build.include? 'bootstrap' || 'profile'
     end

     if v == 'llvm-gcc'
      gcn = "LLVM-GCC (GCC #{fullv})" else gcn = "GCC #{fullv}"
     end

     ohai "Configuring #{b}-bit #{gcn} with support for #{langs}..."
     %x(../configure #{args.join(' ')})

     ENV.append 'MAKEFLAGS', 'BUILD_LLVM_INTO_A_DYLIB=1' if v == 'llvm-gcc'
     ENV.append 'MAKEFLAGS', "LLVM_VERSION_INFO=''" if v == 'llvm-gcc'

     inreplace 'Makefile', ' -g ', ' ' if v < 'llvm-gcc'

     if v > '4.5' and v < '4.8'
      inreplace 'Makefile', '-lgmpxx', '-lgmpxx -lstdc++ -lsupc++'
     end

     system m + 'profiledbootstrap' if build.include? 'profile'
     system m; system m+'-j1 install'; system m+'check' if build.include? 'test'

     if osv == 9; rm_rf realprefix/btriple; Dir['gcc/include/*.h'].each{|f|
      %x(cp -f #{f} #{realsublib}/include/)} end
     Dir['*'].each{|f| rm_rf f}; rm_rf '/tmp/...'

     cd share/"#{name.downcase}/Versions" do %w(Current Latest).each{|d|rm_rf d}
     ln_s v,'Latest'; ln_s 'Latest', 'Current'
    end

    cd realprefix do mv 'man', 'share' if v == 'llvm-gcc'; rm_rf 'info' end
    cd realbin do %w(*cpp* *c++*).each{|d| Dir[d].each{|f| rm_rf f}} end

    if languages.include? 'ada'
     mkdir_p adamlib; mkdir_p adaminclude; cd adalib do
      Dir['*i'].each{|a| %x|chmod +w #{a}|; inreplace a,/\nA.*/,''}
     end
     cd adainclude do Dir['*'].each{|a| %x|chmod +w #{a}|
      inreplace a,/\-\-.*/,''; inreplace a, /\s+\n/,"\n"
      %x|chmod -w #{a}|} if !build.include? 'rts-comments'
     end
     if bits.include? '64'
      cd adamlib do Dir['*i'].each{|a|%x|chmod +w #{a}|; inreplace a,
       /\nA.*/,''} end; cd adaminclude do Dir['*'].each{|a|%x|chmod +w #{a}|
       inreplace a, /\-\-.*/,''; inreplace a,/\s+\n/,"\n"}
      end
     end
    end

    cd reallib do Dir['*'].each{|f| if f == 'x86_64'
     %x(lipo -create libiberty.a x86_64/libiberty.a -output \
      #{realsublib}/libiberty.a) end; if f == 'i386'
     %x(lipo -create libiberty.a x86_64/libiberty.a -output \
      #{realsublib}/libiberty.a) end}
      Dir['*'].each{|f| rm_rf f unless f == 'gcc'}
    end

    mkdir_p realsublib; cd realsublib do # Library fixups.
     %w(la py dSYM g-trasym.o).each{|d|
     %x(find . -name '*#{d}').each{|f| rm_rf f.chomp}}
     cd realsubmlib do %w(*gcj* *gij*).each{|d| Dir[d].each{|f| mv f, bd}} end
     %w(*gcj* *gij*).each{|d| Dir[d].each{|f| mv f, bp}}
     %x(find . -name '*.dylib').each{|f| rm_rf f.chomp}
     cd bd do %w(*gcj* *gij*).each{|d| Dir[d].each{|f| mv f, realsubmlib}} end
     cd bp do %w(*gcj* *gij*).each{|d| Dir[d].each{|f| mv f, realsublib}} end
     %x(find . -name '*.o' -o -name '*.a' -o -name '*.dylib').each{|f|
      %x(strip -x #{f.chomp})}
     if v == 'llvm-gcc'
      Dir['libstdc++*'].each{|f| rm_rf f}; if osv < 11
       cp '/usr/lib/libstdc++-static.a', realsublib/'libstdc++.a'
       cp '/usr/lib/libsupc++.a', realsublib
       %x(strip -x libstdc++.a libsupc++.a)
      else
       ln_s '/usr/lib/libstdc++.dylib','libstdc++.dylib' end
     end
     %w(libgcc_ext.10.4.a libgcc_ext.10.5.a).each{|l| ln 'libgcc.a', l}
    end

    if bits.include? '64' or v == 'llvm-gcc'
     mkdir_p realsubmlib; cd realsubmlib do %w(*.a *.o).each{|d| Dir[d].each{|f|
     unless f=='libgcc_ext.10.4.a' or f=='libgcc_ext.10.5.a' or f=='libiberty.a'
      %x|chmod +w #{f} ../#{f}; lipo -create #{f} ../#{f} -output ../#{f}|
      rm f; cp "../#{f}", f
      if b == '64' and bits.include? '32'
       rm realsublib32/"#{f}"; rm realsubmlib32/"#{f}"
       cp f, realsublib32/"#{f}"; cp f, realsubmlib32/"#{f}" end
      end}}
     end
    end

    if b == '64' and bits.include? '32'
     rm_rf realsubmlib; rm_rf realsubmlib32
     %x(cp -R #{realsublib32} #{realsubmlib})
     %x(cp -R #{realsublib} #{realsubmlib32})
     rm_rf realsubmlib32/'i386'
    end

    cd realsublibexec do
     if v == 'llvm-gcc'
      %x(chmod +w libllvmgcc.dylib; strip -x libllvmgcc.dylib)
      %x(install_name_tool -id libllvmgcc.1.dylib libllvmgcc.dylib)
      mv 'libllvmgcc.dylib', "#{realsublib}/libllvmgcc.1.dylib"
     end
     %w(j* c* g* l* f* install-tools/fixincl plugin/gengtype).each{|d|
       Dir[d].each{|f| %x(strip #{f})
        %x(install_name_tool -change @executable_path/libllvmgcc.dylib \
        @executable_path/#{relrealsublib}/libllvmgcc.1.dylib #{f})
       %x(tease -no_dylib_unused -no_uuid -no_code_signature -a #{f})}}
    end

    cd realbin do
     Dir['gnat*'].each{|g| mv g, btriple+'-'+g+'-'+v}
     Dir[btriple+'-'+btriple+'*'].each{|f| rm_rf f}
     %w(*bug* *.*.* *-nm-* *-ranlib-* *-ar-*).each{|d| Dir[d].each{|f| rm_rf f}}

     Dir['*'].each{|tfv| %x(strip #{tfv})
      %x(tease -no_dylib_unused -no_uuid -no_code_signature -a #{tfv})
      fv = tfv.sub(btriple+'-',''); f = fv.sub('-'+v,'').sub('-4.2','')
      rm_rf fv; rm_rf f; ln_s tfv, fv; ln_s fv, f
      Dir["llvm-"+f.sub('llvm-','')].each{|ff| ln_s ff, ff.sub('llvm-','')}
      mkdir_p bin; cd bin do
       ln_s "../share/#{name.downcase}/Versions/#{v}/#{barch}/bin/#{tfv}", tfv
      end}

     progs = ['gcc','g++']
     progs +=%w(gnatmake gnatbind gnatlink) if languages.include? 'ada'
     progs.each{|p| cd bp/'bin' do %x(rm -rf #{bin}/#{p}; cp #{p} #{bin}) end}

     cd bin do
      %w(gcc g++).each{|f| inreplace bin/f,"$GCC/bin/#{f}",
      "PATH=$GCC/bin:$PATH #{f}"}
      if bits.include? '32' and not bits.include? '64'
       progs.each{|p| inreplace p, 'uname -m', 'uname -p'} end
      if name != 'gcc'
       progs.each{|p| inreplace p,'share/gcc','share'+name.downcase} end
      unless v == 'llvm-gcc'
       progs.each{|p| %x(rm -rf #{p}-#{v}; cp #{p} #{p}-#{v})
       inreplace p+'-'+v, 'Current', v; inreplace p+'-'+v, '$GCCVERSION', v}
       else; if osv > 9
        unless %x(which -s gcc-4.2)
         progs.each{|p| %x(rm -rf #{p}-4.2; cp #{p} #{p}-4.2)
         inreplace p+'-4.2', 'Current', v; inreplace p+'-4.2', '$GCCVERSION', v}
        end
       end
       progs.each{|p| %x(rm -rf llvm-#{p}; cp #{p} llvm-#{p})
       inreplace 'llvm-'+p, 'Current','llvm-gcc'
       inreplace 'llvm-'+p, '$GCCVERSION','llvm-gcc'}
      end
      cd realbin do
        ['#!/bin/sh','PATH=${PATH/$(dirname $0):/} ld "$@" -w'].each{|a|
         %x(echo '#{a}' >> ld; chmod +x ld)} if osv == 9 or v == 'llvm-gcc'
      end
     end
    end
    cd prefix do system 'Trimming... .' end
    ENV.prepend 'PATH', bin, ':' if v >= '4.6' and not v == 'llvm-gcc'
   end
  end}}
  %x(chmod -R 777 #{bp})
  ohai %w(If you have installed multiple versions or architectures, set the
          environmental variables $GCCVERSION and $ARCHPREFERENCE to
          select the version or archictecture you wish to use.).join(' ')
 end
end
